import time
from pageObject.LoginPO import LoginPage
from pageObject.MPISearchPO import MPISearch
from pageObject.IntervieweePO import Interviewee
from utilities import XLUtils
from pageObject.CreateHOHPO import CreateHOH
from utilities.readProperties import ReadConfig
from utilities.Customlogger import LogGen
from pageObject.CreateHHPO import CreateHHPO
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
import random


class Test_AddingInterview():

    url = ReadConfig.getApplicationurl()
    username = ReadConfig.getUsername()
    password = ReadConfig.getPassword()
    Sdis = ReadConfig.getDisaster()
    SdisS = ReadConfig.getDisasterSite()
    HH_url = ReadConfig.getApplicationHH_url()
    logger = LogGen.loggen()
    ResAddstr1 = ReadConfig.getResAddstr1()
    ResAddstr2 = ReadConfig.getResAddstr2()
    ResAddCity = ReadConfig.getResAddCity()
    ResAddZip = ReadConfig.getResAddZip()
    path="C:\\Users\\mkalamshabaz\\PycharmProjects\\DSNAP\\TestData\\DSNAP.xlsx"
    SSN = random.randint(000000000,888888899)
    GenderValue = ReadConfig.getGender()
    DocIDvalue = ReadConfig.getDocId()

    def test_CreateHH(self,setup):
        self.logger.info("**************** Test Interviewee Creation ****************")
        self.driver = setup
        self.driver.maximize_window()
        self.driver.get(self.url)
        time.sleep(3)
        self.lp = LoginPage(self.driver)
        self.lp.EnterUsername(self.username)
        time.sleep(1)
        self.lp.EnterPassword(self.password)
        time.sleep(1)
        self.lp.ClickLogin()
        time.sleep(5)
        self.logger.info("***** Login has been successfully done. *****")
        self.lp.SelectDis(self.Sdis)
        time.sleep(2)
        self.lp.SelectDisSite(self.SdisS)
        time.sleep(2)
        self.lp.ClickGoto()
        time.sleep(2)
        self.lp.ClickAccept()
        time.sleep(3)
        self.logger.info("***** Selected disaster and disaster site successfully. *****")
        self.driver.get(self.HH_url)
        time.sleep(8)
        self.logger.info("***** Creation of HH *****")
        self.CHH = CreateHHPO(self.driver) # Creation of HH
        self.CHH.Click_New()
        time.sleep(5)
        self.CHH.Click_IsHomless()
        time.sleep(1)
        self.CHH.Click_IsHomless_N()
        time.sleep(1)
        self.CHH.Enter_ResAdd_Str1(self.ResAddstr1)
        time.sleep(1)
        self.CHH.Enter_ResAdd_Str2(self.ResAddstr2)
        time.sleep(1)
        self.CHH.Enter_ResAdd_City(self.ResAddCity)
        time.sleep(1)
        self.CHH.Enter_ResAdd_ZipC(self.ResAddZip)
        time.sleep(1)
        actions = ActionChains(setup)
        for _ in range(1):
            actions.send_keys(Keys.PAGE_DOWN).perform()
            time.sleep(2)
        self.CHH.Click_POO()
        time.sleep(1)
        self.CHH.Click_POO_Acadia()
        time.sleep(1)
        self.CHH.Click_MailAdd_Same()
        time.sleep(1)
        self.CHH.Click_MailAdd_Same_Y()
        self.CHH.Click_MailAdd_Str2()
        time.sleep(1)
        for _ in range(1):
            actions.send_keys(Keys.PAGE_DOWN).perform()
            time.sleep(2)
        self.CHH.Click_Rec_SNAP()
        time.sleep(1)
        self.CHH.Click_Rec_SNAP_N()
        time.sleep(1)
        self.CHH.Click_Mem_DCFS()
        time.sleep(1)
        self.CHH.Click_Mem_DCFS_N()
        self.CHH.Click_SNAPState()
        for _ in range(1):
            actions.send_keys(Keys.PAGE_DOWN).perform()
            time.sleep(2)
        self.CHH.Click_AuthRep()
        time.sleep(1)
        self.CHH.Click_AuthRep_N()
        time.sleep(1)
        self.CHH.Click_Save()
        time.sleep(8)
        self.logger.info("***** HH has been created successfully *****")
        self.logger.info("***** Creation of HOH *****")
        self.CHOH = CreateHOH(self.driver)
        self.CHOH.ClickNewHHMem()
        time.sleep(5.5)

        self.rows=XLUtils.getRowCount(self.path,'HOH details')
        for r in range(2,self.rows+1):
            self.FN=XLUtils.readData(self.path,'HOH details',r,1)
            self.LN = XLUtils.readData(self.path, 'HOH details', r, 2)
            self.DOB = XLUtils.readData(self.path, 'HOH details', r, 3)

        self.CHOH.EnterFN(self.FN)
        time.sleep(1.5)
        self.CHOH.EnterLN(self.LN)
        time.sleep(1)
        self.CHOH.EnterDOB(self.DOB)
        time.sleep(1)
        self.CHOH.SelectGender(self.GenderValue)
        time.sleep(1)
        self.CHOH.EnterSSN(self.SSN)
        time.sleep(1)
        self.CHOH.Click_Save()
        time.sleep(5)
        self.logger.info ("***** HOH has been added successfully *****")
        self.logger.info("***** Performing MPI Search *****")
        self.MPIS = MPISearch(self.driver)
        self.MPIS.ClickHOH()
        time.sleep(4.5)
        self.MPIS.ClickLS()
        time.sleep(5)
        self.MPIS.ClickLS_Cancl()
        time.sleep(3.5)
        self.MPIS.ClickMPIS()
        time.sleep(5)
        self.MPIS.ClickMPIS_Cancl()
        time.sleep(3.5)
        self.logger.info ("***** MPI search has been done successfully *****")
        self.MPIS.ClickHOHBck()
        time.sleep(4)
        self.logger.info ("***** Adding Interviewee *****")
        self.AI = Interviewee(self.driver)
        self.AI.Click_MenuOptn()
        time.sleep(2)
        self.AI.Click_New_Inter()
        time.sleep(4)
        self.AI.Click_SearchMem()
        time.sleep(2.5)
        self.AI.Click_Mem()
        time.sleep(1.5)
        self.AI.Select_DocID(self.DocIDvalue)
        time.sleep(1.5)
        #self.driver.execute_script("document.body.style.zoom='80%'")
        #time.sleep(2)
        actions.send_keys(Keys.TAB,Keys.TAB).perform()
        actions.key_down(Keys.LEFT_SHIFT).send_keys(Keys.TAB).key_up(Keys.LEFT_SHIFT).perform()
        actions.key_down(Keys.LEFT_SHIFT).send_keys(Keys.TAB).key_up(Keys.LEFT_SHIFT).perform()
        time.sleep(1)
        actions.send_keys(Keys.ENTER).perform()
        time.sleep(2)
        self.TextMess = self.MPIS.ToastMess()
        if self.TextMess == "The record has been Saved successfully.":
            assert True
            self.logger.info ("***** Interviewee has been added successfully *****")
            self.driver.close()
        else:
            self.logger.info ("***** Interviewee has not been added successfully *****")
            self.driver.save_screenshot("C:\\Users\\mkalamshabaz\\PycharmProjects\\DSNAP\\Screenshots\\AddInterview.png")
            self.driver.close()
            assert False


